'use strict';
import * as keyboards from './keyboards.js';
import * as app from './app.js';
import * as dq from './database-queries.js';
import * as functions from './functions.js';


//–ó–∞–ø—É—Å–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∏–≥—Ä—ã
export async function launch(ChatID) {
    await dq.updateDataClearDataGame(ChatID);
    await registration(ChatID); //–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –∏–≥—Ä–æ–∫–æ–≤
    await dq.updateDataStartGame(ChatID, Date.now()); //–ó–∞–∫—Ä—ã–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –∑–∞–ø–∏—Å–∞–ª–∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
    const data = await dq.getDataGame(ChatID);//–ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è —á–µ–ª–æ–≤–µ–∫
    if (data.dataGame.counterPlayers > 3) {
        await app.bot.telegram.sendMessage(ChatID, 'C…ôh…ônn…ômd…ô yeni bir oyun ba≈üladƒ± üî•');
        const masRoles = await creatingRoles(ChatID, data.dataGame.counterPlayers); //–ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ —Ä–æ–ª–µ–π
        await distributionOfRoles(ChatID, masRoles, data.players); //–†–∞–∑–¥–∞—é —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–∞–º
        await sendRoleMessage(ChatID); //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–æ–ª—å—é –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º
        let continueGame = true;
        while(continueGame) {
            const data = await dq.getDataGame(ChatID);
            console.log('G√ºn√ºn d…ôyi≈üm…ôsi', data);

            if (data.dataGame.statysDay) {
                await day(ChatID, data); //–ù–∞—Å—Ç—É–ø–∞–µ—Ç –¥–µ–Ω—å
            } else {
                await night(ChatID, data); //–ù–∞—Å—Ç—É–ø–∞–µ—Ç –Ω–æ—á—å
            }
            continueGame = await checkingTheEndOfTheGame(ChatID); //–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É
        }
    } else {//–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –∏ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        const dataMessageID = await dq.getDataDeleteMessageRegistration(ChatID);
        if (dataMessageID.messageID != 0 ) {
            await app.bot.telegram.sendMessage(
                ChatID,
                'Yet…ôrli oyun√ßu yoxdu, oyun l…ôƒüv edildi !'
            );
        }
    }
    await dq.updateDataClearDataGame(ChatID);
}


//–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
export async function updateMessageRegistration(chatID) {
    const data = await dq.getDataUpdateMessageRegistration(chatID);
    let textMessage = `Oyun ${data.registrationTimeLeft} saniy…ôy…ô ba≈ülayƒ±r! \nOyun√ßular:` + await getLifeUsersText(chatID);
    app.bot.telegram.editMessageText(
        chatID,
        data.messageID,
        null,
        textMessage,
        {
        parse_mode: 'HTML',
        reply_markup: keyboards.userRegistrationBtn(process.env.URL_BOT, chatID)
        }
    );
}


//–û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä—É
export async function clearDataGame(chatID) {
    const dataMessageID = await dq.getDataDeleteMessageRegistration(chatID);
    try {
        if (dataMessageID != 0) {
        await app.bot.telegram.deleteMessage(chatID, dataMessageID.messageID);
        }
    }
    finally  {
        await dq.updateDataClearDataGame(chatID);
        await app.bot.telegram.sendMessage(
            chatID,
            'Oyun dayandƒ±rƒ±ldƒ±!'
        );
    }
}


//–ó–∞–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –∫—Ç–æ –Ω–µ –∂–∏–≤–æ–π
export async function closeWriteChat(ctx) {
    const data = await dq.getDataCloseWriteChat(ctx.message.chat.id);

    if (data != null && data.dataGame.counterDays != 0) {
        if (ctx.message.document == undefined || ctx.message.photo == undefined) {
            if (data.dataGame.statysDay) {
                let DeleteMessage = true;
                for (const item of data.players) {
                    if (item.userID == ctx.message.from.id && (item.lifeStatus || item.dyingMessage)) {
                        DeleteMessage = false;
                        if (item.dyingMessage) {
                            await dq.updateDyingMessage(ctx.message.chat.id, ctx.message.from.id);
                        }
                    }
                }
                if (DeleteMessage) {
                    ctx.deleteMessage();
                }
            } else {
                ctx.deleteMessage();
            }
        } else {
            ctx.deleteMessage();
        }
    }
}

//–°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Å —Ä–æ–ª—è–º–∏ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–¥ —Å–∫–æ–ª—å–∫–æ —É –Ω–∞—Å –∏–∑ –∫–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞
async function creatingRoles(chatID, counter) {
    let masRoles, counterWorld = 0, counterMafia = 2, counterTriada = 0;
    if (counter <5) {
        masRoles = ['Cin', 'H…ôkim', '√ñl√ºms√ºz']; //2
        counterWorld = 2;
        counterMafia = 1;
    } else if (counter <7) {
        masRoles = ['Cin', 'H…ôkim', 'Komissar', '√ñl√ºms√ºz'];//2
        counterWorld = 3;
    } else if (counter <9) {
        masRoles = ['Cin', 'Ruh', 'H…ôkim', 'Komissar', '√ñl√ºms√ºz', 'Kamikadze'];//3
        counterWorld = 4;
    } else if (counter <10) {
        masRoles = [
            'Cin', 'Ruh', 'H…ôkim', 'Komissar', '√ñl√ºms√ºz', 'Kamikadze', 
            'M√ºhafiz…ô√ßi', 'Manyak'
        ];//2
        counterWorld = 6;
    } else if (counter <11) {
        masRoles = [
            'Cin', 'Ruh', 'H…ôkim', 'Komissar', '√ñl√ºms√ºz', 'Kamikadze', 
            'M√ºhafiz…ô√ßi', 'Manyak', 'M…ô≈üuq…ô'
        ];//2
        counterWorld = 7;
    } else if (counter <13) {
        masRoles = [
            'Cin', 'Ruh', 'H…ôkim', 'Komissar', 'Leytenant', '√ñl√ºms√ºz', 
            'Kamikadze', 'M√ºhafiz…ô√ßi', 'Manyak', 'M…ô≈üuq…ô'
        ];//3
        counterWorld = 8;
    } else if (counter <15) {
        masRoles = [
            'Cin', 'Ruh', 'H…ôkim', 'Komissar', 'Leytenant', '√ñl√ºms√ºz', 
            'Kamikadze', 'M√ºhafiz…ô√ßi', 'Manyak', 'Manyak', 'Zombi'
        ];//4
        counterWorld = 8;
        counterTriada = 1;
    } else if (counter <19) {
        masRoles = [
            'Cin', 'Ruh', 'H…ôkim', 'Komissar', 'Leytenant', '√ñl√ºms√ºz', 
            'Kamikadze', 'M√ºhafiz…ô√ßi', 'Manyak', 'M…ô≈üuq…ô', 'Zombi', 'D…ôli'
        ];//7
        counterWorld = 8;
        counterTriada = 2;
    }
    const WorldPlayer = counter-masRoles.length;
    if (WorldPlayer != 0) {
        for (let i = 0; i < WorldPlayer ; i++) {
            masRoles.push('ƒ∞nsan');
            counterWorld+=1;
        }
    }
    await dq.updateCounterRolesGame(chatID, counterWorld, counterMafia, counterTriada);   ///–¢—É—Ç –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∏–±–æ —è –Ω–µ –¥–æ–∂–∏–¥–∞—é—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    return mixingMas(masRoles);
}

//–ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–∞–º
function distributionOfRoles(ChatID, masRoles, masPlayers) {
    masPlayers.forEach((item, i) => {
        let allies = 0;
        if (masRoles[i] == 'Komissar' || masRoles[i] == 'Leytenant') {
            allies = 1;
        } else if (masRoles[i] == 'Cin' || masRoles[i] == 'Ruh') {
            allies = 2;
        } else if (masRoles[i] == 'Zombi' || masRoles[i] == 'D…ôli') {
            allies = 3;
        }
        dq.addRolePlayer(ChatID, item.userID, masRoles[i], allies);
    });
}

//–ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤ —Å —Ä–æ–ª—è–º–∏
function mixingMas(arr) {
    let tmp, randindex;
    const length  = arr.length;
    for (let j = 0; j < 3 ; j++) {
        for (let i = 0; i < length ; i++) {
            randindex = getRandomInt(0, length);
            tmp = arr[i];
            arr[i] = arr[randindex];
            arr[randindex] = tmp;
        }
    }
    return arr;
}

//–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
function getRandomInt(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min)) + min; //–ú–∞–∫—Å–∏–º—É–º –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è, –º–∏–Ω–∏–º—É–º –≤–∫–ª—é—á–∞–µ—Ç—Å—è
}

//–ù–∞—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–æ—á–∏
async function night(ChatID, data) {
    await dq.clearCounterActiveRoles(ChatID); //–û—á–∏—â–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–ª–µ–π
    await sendNightMessage(ChatID); //–û—Ç–ø—Ä–∞–≤–∏–ª–∏ –≥–∏—Ñ–∫—É —Å –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º –Ω–æ—á–∏
    await sendNightMessageLivePlayers(ChatID); //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∂–∏–≤—ã–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏
    await sendNightMessageActionsLivePlayers(ChatID, data);//–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
    for (let i = 0; i < 12; i++) { //–ñ–¥–µ–º –º–∏–Ω—É—Ç—É –∏–ª–∏ –ø–æ–∫–∞ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–ª–∏ –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å—É—é—Ç
        await delay(5000);
        const data = await dq.getDataCounterActiveRoles(ChatID);
        if (data.dataGame.counterActiveRoles == 0){
            break;
        }
    }
    let newData = await dq.getDataGame(ChatID);
    await ProcessingResultsNight(newData, ChatID); //–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–æ—á–∏ –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
}

//–ù–∞—Å—Ç—É–ø–ª–µ–Ω–∏–µ –¥–Ω—è
async function day(ChatID, data) {
    const i = data.dataGame.counterDays/2;
    await deleteMessageAct(data, ChatID); //–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–∏–º–∞–ª –Ω–æ—á—å—é
    await sendSunMessage(ChatID, i); //–û—Ç–ø—Ä–∞–≤–∏–ª–∏ –≥–∏—Ñ–∫—É —Å –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º –¥–Ω—è
    await sendDayMessageLivePlayers(ChatID, data); //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∂–∏–≤—ã–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏
    await delay(45000); //–ñ–¥–µ–º 45 —Å–µ–∫—É–Ω–¥
    await sendMessageVote(ChatID, data.players);//–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–ª–∫—É
    await delay(45000);// –ñ–¥–µ–º 45 —Å–µ–∫—É–Ω–¥
    await ProcessingResultsDay(ChatID);
    await dq.updateStatusDay(ChatID, false);
}

//–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–Ω–µ–≤–Ω—ã–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º
async function sendMessageVote(ChatID, players) {
    for (const player of players) {
        if (player.lifeStatus && player.votes) {
            const messageData = await app.bot.telegram.sendMessage(
                player.userID,
                'G√ºnahkarƒ± axtarmaƒüƒ±n vaxtƒ± g…ôldi!\nKimi lin√ß etm…ôk ist…ôyirs…ôn?',
                {
                    parse_mode: 'HTML',
                    reply_markup: keyboards.buttonActionsDay(ChatID, players, player.userID)
                }
            );
            await dq.updateMessageIDPlayer(ChatID, messageData.message_id, player.userID);
        }
    }
}

//–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–ª –¥–µ–π—Å—Ç–≤–∏–µ
async function deleteMessageAct(data, ChatID) {
    for (const player of data.players) {
        if (player.messageID != 0) {
            await app.bot.telegram.deleteMessage(player.userID, player.messageID);
        }
        await dq.clearMessageIDPlayers(ChatID, player.userID);
    }
}

//–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –æ —Ç–æ–º —á—Ç–æ –∏–≥—Ä–æ–∫ —Å–¥–µ–ª–∞–ª —Ö–æ–¥
async function sendMessageAboutProgressRole(ChatID, userID, actUserID) {
    const user = await dq.getInfoPlayer(ChatID, userID),
          userAct = await dq.getInfoPlayer(ChatID, actUserID);
    let textMessage = '',
        textMessageUser = '';
    switch(user.players[0].role){
        case 'Cin':
            textMessage = 'üëπ <b>Cin</b> kim…ôs…ô yaxƒ±nla≈üƒ±r...';
            textMessageUser = `S…ônin se√ßimin<a href="tg://user?id=${userAct.players[0].userID}">${userAct.players[0].name}</a>`;
            break;
        case 'Ruh':
            textMessage = 'üë∫ <b>Ruh</b> bir oyun√ßunu c…ôh…ônn…ômin dibin…ô √ß…ôkdi...';
            textMessageUser = `S…ônin se√ßimin <a href="tg://user?id=${userAct.players[0].userID}">${userAct.players[0].name}</a>`;
            break;
        case 'H…ôkim':
            textMessage = 'üë®üèº‚Äç‚öïÔ∏è <b>H…ôkim</b> kimis…ô saƒüaltmaƒüa √ßalƒ±≈üƒ±r...';
            textMessageUser = `S…ônin se√ßimin <a href="tg://user?id=${userAct.players[0].userID}">${userAct.players[0].name}</a>`;
            break;
        case 'Komissar':
            if (user.players[0].copCheck){
                textMessage = 'üïµüèºÔ∏è‚Äç‚ôÇÔ∏è <b>Komissar</b> cini axtarmaƒüa getdi...';
                textMessageUser = `S…ônin se√ßimin <a href="tg://user?id=${userAct.players[0].userID}">${userAct.players[0].name}</a>`;
            } else {
                textMessage = 'üïµüèºÔ∏è‚Äç‚ôÇÔ∏è <b>Komissar</b> silahƒ±nƒ± bir n…ôf…ôr…ô tutdu...';
                textMessageUser = `S…ônin se√ßimin<a href="tg://user?id=${userAct.players[0].userID}">${userAct.players[0].name}</a>`;
            }
            break;
        case 'M√ºhafiz…ô√ßi':
            textMessage = '‚úä <b>M√ºhafiz…ô√ßi</b> √∂z h…ôyatƒ±nƒ± t…ôhl√ºk…ôy…ô atdƒ±..';
            textMessageUser = `S…ônin se√ßimin <a href="tg://user?id=${userAct.players[0].userID}">${userAct.players[0].name}</a>`;
            break;
        case 'Manyak':
            textMessage = 'üî™ <b>Manyak</b> kimis…ô bƒ±√ßaqladƒ±...';
            textMessageUser = `S…ônin se√ßimin<a href="tg://user?id=${userAct.players[0].userID}">${userAct.players[0].name}</a>`;
            break;
        case 'M…ô≈üuq…ô':
            textMessage = 'üíÉüèª <b>M…ô≈üuq…ô</b> kimins…ô qonaƒüƒ± oldu...';
            textMessageUser = `S…ônin se√ßimin<a href="tg://user?id=${userAct.players[0].userID}">${userAct.players[0].name}</a>`;
            break;
        case 'Zombi':
            textMessage = 'üßü‚Äç‚ôÄ <b>Zombi</b> qurbanƒ±nƒ± se√ßdi...';
            textMessageUser = `S…ônin se√ßimin <a href="tg://user?id=${userAct.players[0].userID}">${userAct.players[0].name}</a>`;
            break;
        case 'D…ôli':
            textMessage = 'ü§° <b>D…ôli</b> ortalƒ±qda g…ôzir...';
            textMessageUser = `S…ônin se√ßimin <a href="tg://user?id=${userAct.players[0].userID}">${userAct.players[0].name}</a>`;
            break;
    }
    if (textMessage !== '') {
        app.bot.telegram.sendMessage(
            ChatID,
            textMessage,
            { parse_mode: 'HTML' }
        );
        app.bot.telegram.sendMessage(
            userID,
            textMessageUser,
            { parse_mode: 'HTML' }
        );
    }
}

//–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫—Ç–æ –∑–∞ –∫–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–ª
async function sendMessageVoiceUserInChat(ChatID, userID, userIDAct) {
    const user = await dq.getInfoPlayer(ChatID, userID),
          userAct = await dq.getInfoPlayer(ChatID, userIDAct);
    app.bot.telegram.sendMessage(
        ChatID,
        `<a href="tg://user?id=${userID}">${user.players[0].name}</a> `+
        `s…ôs verdi: <a href="tg://user?id=${userIDAct}">${userAct.players[0].name}</a>`,
        { parse_mode: 'HTML' }
    );
}

//–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
async function checkingTheEndOfTheGame(ChatID) {
    let data = await dq.getDataGame(ChatID);
    let continueGame = true;
    let won = 0;
    if (data.dataGame.timeStart != 0) {
        if (data.dataGame.inactivePlay != 0) {
            if (!data.dataGame.statysDay) { // –∫–æ–Ω–µ—Ü –¥–Ω—è
                if (data.dataGame.counterMafia === 0 && data.dataGame.counterTriada === 0) {
                    won = 1;
                } else if (data.dataGame.counterWorld === 0 && data.dataGame.counterTriada === 0) {
                    won = 2;
                } else if (data.dataGame.counterMafia === 0 && data.dataGame.counterWorld === 0) {
                    won = 3;
                }
                //–ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è 1 –º–∏—Ä–Ω—ã–π –∏ –∫—Ç–æ —Ç–æ –∏–∑ –º–∞—Ñ–∏–∏ –∏–ª–∏ —Ç—Ä–∏–∞–¥—ã —Ç–æ –ø–æ–±–µ–¥–∏–ª–∏ —Ç–µ
            } else { //–ö–æ–Ω–µ—Ü –Ω–æ—á–∏
                if (data.dataGame.counterWorld === 0 && data.dataGame.counterMafia === 0 && data.dataGame.counterTriada === 0) {
                    continueGame = false;
                    app.bot.telegram.sendMessage(
                        ChatID,
                        'B√ºt√ºn oyun√ßular √∂ld√º - qalib yoxdur'
                    );
                } else if (data.dataGame.counterMafia === 0 && data.dataGame.counterTriada === 0) {
                    won = 1;
                } else if (data.dataGame.counterWorld <= 1 && data.dataGame.counterMafia > 0 && data.dataGame.counterTriada === 0) {
                    won = 2;
                } else if (data.dataGame.counterWorld <= 1 && data.dataGame.counterTriada > 0 && data.dataGame.counterMafia === 0) {
                    won = 3;
                }
            }
            if (won !=0) {
                continueGame = false;
                await sendMessageGameEnd(ChatID, won, data);
            }
        } else {
            continueGame = false;
            app.bot.telegram.sendMessage(
                ChatID,
                'Uzun m√ºdd…ôtdir he√ß bir f…ôaliyy…ôt yoxdur, oyun bitdi!'
            );
        }
        return continueGame;
    }
    return false;
}

//–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã
async function sendMessageGameEnd(ChatID, won, data) {
    let textMessage = `<b>Oyun Bitdi!</b>\nQalibl…ôr`;
    let textEndMessage = ``;
    switch (won) {
        case 1:
            textMessage += `–∏: ƒ∞nsan\n\nQalibl…ôr:`;
            for (const player of data.players) {
                if (player.lifeStatus || player.suicide) {
                    textMessage+=`\n  <a href="tg://user?id=${player.userID}">${player.name}</a> - <b>${player.initialRole}</b>`;
                    await dq.addWorldVictoryPlayer(ChatID, player.userID);
                } else if (player.suicide) {
                    textMessage+=`\n  <a href="tg://user?id=${player.userID}">${player.name}</a> - <b>${player.initialRole}</b>`;
                    await dq.addWorldVictoryPlayer(ChatID, player.userID);
                } else {
                    textEndMessage+=`\n  <a href="tg://user?id=${player.userID}">${player.name}</a> - <b>${player.initialRole}</b>`;
                    await dq.addCounterGamePlayer(ChatID, player.userID);
                }
            }
            await dq.addWorldVictoryChat(ChatID);
            break;
        case 2:
            textMessage += `Cinl…ôr\n\nQalibdir:`;
            for (const player of data.players) {
                if (player.lifeStatus && (player.initialRole == 'Cin' || player.initialRole == 'Ruh')) {
                    textMessage+=`\n  <a href="tg://user?id=${player.userID}">${player.name}</a> - <b>${player.initialRole}</b>`;
                    await dq.addMafiaVictoryPlayer(ChatID, player.userID);
                } else if (player.suicide) {
                    textMessage+=`\n  <a href="tg://user?id=${player.userID}">${player.name}</a> - <b>${player.initialRole}</b>`;
                    await dq.addWorldVictoryPlayer(ChatID, player.userID);
                } else {
                    textEndMessage+=`\n  <a href="tg://user?id=${player.userID}">${player.name}</a> - <b>${player.initialRole}</b>`;
                    await dq.addCounterGamePlayer(ChatID, player.userID);
                }
            }
            await dq.addMafiaVictoryChat(ChatID);
            break;
        case 3:
            textMessage += `Zombi\n\nQalibdir:`;
            for (const player of data.players) {
                if (player.lifeStatus && (player.initialRole == 'Zombi' || player.initialRole == 'D…ôli')) {
                    textMessage+=`\n  <a href="tg://user?id=${player.userID}">${player.name}</a> - <b>${player.initialRole}</b>`;
                    await dq.addTriadaVictoryPlayer(ChatID, player.userID);
                } else if (player.suicide) {
                    textMessage+=`\n  <a href="tg://user?id=${player.userID}">${player.name}</a> - <b>${player.initialRole}</b>`;
                    await dq.addWorldVictoryPlayer(ChatID, player.userID);
                } else {
                    textEndMessage+=`\n  <a href="tg://user?id=${player.userID}">${player.name}</a> - <b>${player.initialRole}</b>`;
                    await dq.addCounterGamePlayer(ChatID, player.userID);
                }
            }
            await dq.addTriadaVictoryChat(ChatID);
            break;
    }
    textMessage+=`\n\nQalan i≈ütirak√ßƒ±lar:`+textEndMessage+`\n\nOyun m√ºdd…ôti: `+convertTimeToText(data.dataGame.timeStart);
    await app.bot.telegram.sendMessage(
        ChatID,
        textMessage,
        {
            parse_mode: 'HTML',
            reply_markup: keyboards.newGame()
        }
    );
}

//–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–∏—Ñ–∫—É —Å–Ω–∞—á–∞–ª–æ–º –Ω–æ—á–∏
async function sendNightMessage(ChatID) {
    await app.bot.telegram.sendAnimation(
        ChatID,
        'https://media.tenor.com/images/286ae769ba034e724ce706d371df374d/tenor.gif',
        {
          parse_mode: 'HTML',
          caption: 'üåÉ <b>Gec…ô d√º≈ü√ºr</b> Yalnƒ±z c…ôsar…ôtlil…ôr v…ô qorxmazlar c…ôh…ônn…ômd…ô g√∂rs…ônir. S…ôh…ôr ba≈ülarƒ±nƒ± saymaƒüa √ßalƒ±≈üacaƒüƒ±q...',
          reply_markup: keyboards.goToBot(process.env.URL_BOT)
        }
    );
}

//–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∂–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–æ—á–∏
async function sendNightMessageLivePlayers(ChatID) {
    await app.bot.telegram.sendMessage(
        ChatID,
        `<b>C…ôh…ônn…ômd…ô saƒü qalanlar: </b>`+await getLifeUsersText(ChatID)+`\n\nYuxu vaxtƒ± <b>1 d…ôq.</b>`,
        { parse_mode: 'HTML' }
    );
}

//–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–æ–ª—è–º–∏ –∏–≥—Ä–æ–∫–æ–≤
async function sendRoleMessage(ChatID) {
    const data = await dq.getDataGame(ChatID);
    for (let player of data.players) {
        const textMessage = await createTextMessageRoles(player.role);
        await app.bot.telegram.sendMessage(
            player.userID,
            textMessage,
            { parse_mode: 'HTML' }
        );
    }
}

//–§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ä–æ–ª–∏
function createTextMessageRoles(role) {
    let textMessage = 'Siz …ôg…ôr bu mesajƒ± g√∂r√ºrs√ºn√ºzs…ô z…ôhm…ôt olmasa onu @aykhan_s -…ô y√∂nl…ôndirin';
    switch(role) {
        case 'ƒ∞nsan':
            textMessage = 'Rolun - üë®üèº <b>ƒ∞nsan</b>.\n∆èsas m…ôqs…ôdi gec…ô d√º≈üm…ômi≈ü cin v…ô ruhu m√º…ôyy…ôn etm…ôk v…ô onlarƒ± s…ôs verm…ôyl…ô oyundan k…ônarla≈üdƒ±rmaqdƒ±r';
            break;
        case 'Cin':
            textMessage = 'Rolun - üëπ <b>Cin</b>.\nC…ôh…ônn…ôm onun …ôlind…ôdir h…ôr gec…ô bir n…ôf…ôri √∂ld√ºr√ºr...';
            break;
        case 'Ruh':
            textMessage = 'Rolun - üë∫ <b>Ruh</b>.\nCinin k√∂m…ôk√ßisidir g√ºn …ôrzind…ô oyun√ßularƒ± s…ôsl…ôrind…ôn m…ôhrum edir, Cin √∂l…ôrs…ô onun yerin…ô ke√ßir.';
            break;
        case 'H…ôkim':
            textMessage = 'Rolun - üë®üèº‚Äç‚öïÔ∏è <b>H…ôkim</b>.\nsakinl…ôri yax≈üƒ±la≈üdƒ±rƒ±r, ancaq ardƒ±cƒ±l 2 d…ôf…ô bir oyun√ßunu saƒüaldƒ±rsa v…ô bir d…ôf…ôy…ô vurulmayƒ±bsa, onu √∂l√ºm√ºn…ô q…ôd…ôr saƒüaldƒ±r...';
            break;
        case 'Komissar':
            textMessage = 'Rolun - üïµüèºÔ∏è‚Äç‚ôÇÔ∏è <b>Komissar</b>.\nƒ∞nsanlarƒ±n ba≈ü√ßƒ±sƒ±, Cin v…ô Ruhu axtarƒ±r, oyun√ßunu yoxlaya v…ô ya √∂ld√ºr…ô bil…ôr...';
            break;
        case 'Leytenant':
            textMessage = 'Rolun - üëÆüèª <b>Leytenant</b>.\nKomissar k√∂m…ôk√ßisi, r…ôis √∂ld√ºkd…ô r√ºtb…ô alƒ±r v…ô komissar olur';
            break;
        case '√ñl√ºms√ºz':
            textMessage = 'Rolun - üï∫ <b>√ñl√ºms√ºz insan</b>.\nS…ôn √ñl√ºms√ºzs…ôn. Geceler vurulduqda √∂lm√ºrs…ôn, yalnƒ±z g√ºnd√ºz s…ôs verm…ôd…ô asƒ±la bilirs…ôn.';
            break;
        case 'Kamikadze':
            textMessage = 'Rolun - ü§¶üèº‚Äç‚ôÇÔ∏è <b>Kamikadze</b>.\nintihar√ßƒ±dƒ±r, m…ôqs…ôdi g√ºnortadan sonra iclasda asƒ±lmaqdƒ±r :)';
            break;
        case 'M√ºhafiz…ô√ßi':
            textMessage = 'Rolun - ‚úä <b>M√ºhafiz…ô√ßi</b>.\nƒ∞≈üd…ôn tez ayrƒ±ldƒ±qda ist…ônil…ôn oyun√ßunu …ôhat…ô edir, ancaq oyun√ßunu √∂l√ºmd…ôn qurtarƒ±r...';
            break;
        case 'Manyak':
            textMessage = 'Rolun - üî™ <b>Manyak</b>.\nT…ôkba≈üƒ±na mafiya il…ô m√ºbariz…ô aparmaq ist…ôyir, ist…ônil…ôn insanƒ± √∂ld√ºr…ô bil…ôr...';
            break;
        case 'M…ô≈üuq…ô':
            textMessage = 'Rolun - üíÉüèª <b>M…ô≈üuq…ô</b>.\nGec…ôl…ôr oyun√ßunun diqq…ôtini yayƒ±ndƒ±rƒ±r v…ô h…ôr…ôk…ôt etm…ôk f√ºrs…ôtini itirir...';
            break;
        case 'Zombi':
            textMessage = 'Rolun - üßü‚Äç‚ôÄ <b>Zombi</b>.\nM…ôqs…ôdi mafiya v…ô m√ºlki ≈ü…ôxsl…ôri √∂ld√ºrm…ôk olan ≈ü…ôh…ôrd…ôki 2 cinay…ôtkar ail…ônin ba≈ü√ßƒ±sƒ±dƒ±r...';
            break;
        case 'D…ôli':
            textMessage = 'Rolun - ü§° <b>D…ôli</b>.\nzZombinin k√∂m…ôk√ßisi, oyun√ßunu komissar v…ô ya mafiya rolunun olub olmadƒ±ƒüƒ±nƒ± yoxlayƒ±r, zombi √∂ld√ºkd…ô yerini alƒ±r...';
            break;
    }
    return textMessage;
}

//–§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–µ–π—Å—Ç–≤–∏–µ–º
async function createTextMessageAction(role, userID, ChatID) {
    let textMessage = '';
    switch(role) {
        case 'Cin':
        case 'Manyak':
        case 'Zombi':
            textMessage = 'Bu gec…ô kimi √∂ld√ºr…ôc…ôyik?';
            break;
        case 'Ruh':
            textMessage = 'G√ºn …ôrzind…ô kimi s…ôsverm…ô h√ºququndan m…ôhrum ed…ôc…ôyik?';
            break;
        case 'H…ôkim':
            textMessage = 'Kim…ô m√ºalic…ô ed…ôc…ôyik?';
            break;
        case 'Komissar':
            const messageData = await app.bot.telegram.sendMessage(
                userID,
                'N…ô edirik?',
                { reply_markup: keyboards.checkOrKill(ChatID) }
            );
            await dq.updateMessageIDPlayer(ChatID, messageData.message_id, userID);
            break;
        case 'M√ºhafiz…ô√ßi':
            textMessage = 'Bu gec…ô kiml…ôri qoruyacaƒüƒ±q?';
            break;
        case 'M…ô≈üuq…ô':
            textMessage = 'Bu gec…ô kim…ô ged…ôk?';
            break;
        case 'D…ôli':
            textMessage = 'Kimi yoxlayaq?';
            break;
    }
    return textMessage;
}

//–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–ª–µ–π
async function sendNightMessageActionsLivePlayers(ChatID, data) {
    for (let player of data.players) {
        if (player.lifeStatus) {
            let textMessage = await createTextMessageAction(player.role, player.userID, ChatID);
            if (textMessage != '') {
                await dq.updateDataCounterActiveRoles(ChatID, true);
                const messageData = await app.bot.telegram.sendMessage(
                    player.userID,
                    textMessage,
                    { reply_markup: keyboards.buttonActionsNight(ChatID, data.players, player.userID, player.allies) }
                );
                await dq.updateMessageIDPlayer(ChatID, messageData.message_id, player.userID);
            }
        }
    }
}

//–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–æ—á–∏
async function ProcessingResultsNight(data, ChatID) {
    let trigerAction = 0,
        kill = 0,
        Lucky = false;
    let cloneData = JSON.parse(JSON.stringify(data));
    cloneData.dataGame.statysDay = true;
    //–û—á–∏—â–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è —É —Ç–æ–≥–æ, –∫ –∫–æ–º—É —Å—Ö–æ–¥–∏–ª–∞ –∫—Ä–∞—Å–æ—Ç–∫–∞
    if (data.dataGame.counterPlayers >= 10) {
        data.players.forEach((player, i) => {
            if (player.lifeStatus && player.role == 'M…ô≈üuq…ô' && player.actID != 0) {
                const actID = player.actID;
                cloneData.players[i].actID = 0;
                data.players.forEach((player, i) => {
                    if (player.userID == actID) {
                        cloneData.players[i].actID = 0;
                        data.players[i].actID = 0;
                        trigerAction += 1;
                        app.bot.telegram.sendMessage(
                            player.userID, 
                            'M…ô≈üuq…ô s…ônin qonaƒüƒ±n oldu...');
                    }
                });
            }
        });
    }
    //–°—Ç—Ä–µ–ª—è–µ–º –ø–æ –∏–≥—Ä–æ–∫–∞–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö
    data.players.forEach((player, i) => {
        if ((player.lifeStatus && player.role == 'Cin' && player.actID != 0)||
            (player.lifeStatus && player.role == 'Komissar' && player.actID != 0 && !player.copCheck)||
            (player.lifeStatus && player.role == '–úanyak' && player.actID != 0)||
            (player.lifeStatus && player.role == 'Zombi' && player.actID != 0)) {

            const actID = player.actID;
            cloneData.players[i].actID = 0;
            data.players.forEach((player, i) => {
                if (player.userID == actID) {
                    cloneData.players[i].lifeStatus = false;
                    cloneData.players[i].dyingMessage = true;
                    cloneData.players[i].therapyDay = 0;
                    cloneData = updateCounter(cloneData, i, true);
                    data.players[i].therapyDay = 0;
                    trigerAction += 1;
                    app.bot.telegram.sendMessage(
                        player.userID,
                        'Sizi √∂ld√ºrd√ºl…ôr :(');
                }
            });
        } else if ((player.lifeStatus && player.role == 'Komissar' && player.actID != 0 && player.copCheck)||
                   (player.lifeStatus && player.role == 'D…ôli' && player.actID != 0)||
                   (player.lifeStatus && player.role == 'Ruh' && player.actID != 0)) {
            const actID = player.actID,
                  checkingID = player.userID,
                  role = player.role;

            cloneData.players[i].actID = 0;
            data.players.forEach((player, i) => {
                if (player.userID == actID) {
                    trigerAction += 1;
                    if (role == 'Ruh') {
                        cloneData.players[i].votes = false;
                        app.bot.telegram.sendMessage(
                            player.userID,
                            '≈û…ôh…ôr xaricind…ôsiniz v…ô g√ºnd√ºz iclasƒ±nda i≈ütirak ed…ô bilm…ôzsiniz...');
                    } else {
                        app.bot.telegram.sendMessage(
                            player.userID,
                            'Kims…ô s…ônin rolunu √∂yr…ôndi...');
                    }
                    if (role == 'Komissar') {
                        app.bot.telegram.sendMessage(
                            checkingID,
                            `${player.name} - ${player.role}`);
                    } else if (role == 'D…ôli') {
                        if (player.role == 'Komissar' || 
                            player.role == 'Leytenant'|| 
                            player.role == 'Cin'|| 
                            player.role == 'Ruh') {

                            app.bot.telegram.sendMessage(
                                checkingID,
                                `${player.name} - ${player.role}`);
                        } else {
                            app.bot.telegram.sendMessage(
                                checkingID,
                                `${player.name} - ƒ∞nsan`);
                        }
                    }
                }
            });
        }
    });
    //–û–∂–∏–≤–ª—è–µ–º –∏–ª–∏ —É–±–∏–≤–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
    data.players.forEach((player, i) => {
        if (player.lifeStatus && player.role == 'H…ôkim' && player.actID != 0) {
        
            const actID = player.actID,
                  index = i;
            cloneData.players[i].actID = 0;
            trigerAction += 1;

            cloneData.players.forEach((player, i) => {
                if (player.userID == actID) {
                    if (player.lifeStatus) {
                        if (player.therapyDay == cloneData.dataGame.counterDays -2 ) {
                            cloneData.players[i].lifeStatus = false;
                            cloneData.players[i].dyingMessage = true;
                            cloneData = updateCounter(cloneData, i, true);
                            app.bot.telegram.sendMessage(
                            player.userID,
                            'H…ôkim daha √ßox h…ôb g…ôtirdi v…ô dozasƒ±nƒ± a≈üdƒ±nƒ±z... '+
                            'Oyunla s√∂hb…ôtd…ô h…ôkim…ô "t…ô≈ü…ôkk√ºr edir…ôm" dey…ô bil…ôrsiniz');
                        } else {
                            cloneData.players[i].therapyDay = cloneData.dataGame.counterDays;
                            app.bot.telegram.sendMessage(
                            player.userID,
                            'Ba≈üƒ±nƒ±z aƒürƒ±yƒ±rdƒ± v…ô h…ôkim siz…ô bir h…ôb verdi...');
                        }
                    } else {
                        cloneData.players[i].lifeStatus = true;
                        cloneData.players[i].therapyDay = 0;
                        cloneData = updateCounter(cloneData, i, false);
                        app.bot.telegram.sendMessage(
                            player.userID,
                            'Sizi vurdular, ama H…ôkim sizi saƒüaltdƒ±...');
                    }
                }
            });
        }
    });
    //C–ø–∞—Å–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
    data.players.forEach((player, i) => {
        if (player.lifeStatus && player.role == 'M√ºhafiz…ô√ßi' && player.actID != 0) {
            const actID = player.actID,
                  index = i;

            cloneData.players[i].actID = 0;
            trigerAction += 1;
            cloneData.players.forEach((player, i) => {
                if (player.userID == actID) {
                    if (player.lifeStatus) {
                        app.bot.telegram.sendMessage(
                            player.userID,
                            'M√ºhafiz…ô s…ôni b√ºt√ºn gec…ô qorudu, amma h√ºcum olmadƒ±...');
                    } else {
                        cloneData.players[index].role = 'ƒ∞nsan';
                        cloneData.players[i].lifeStatus = true;
                        cloneData = updateCounter(cloneData, i, false);
                        app.bot.telegram.sendMessage(
                            player.userID,
                            'Sizi vururdular, ancaq m√ºhafiz…ô√ßi sizi xilas etdi v…ô yaralandƒ±...');
                        app.bot.telegram.sendMessage(
                            cloneData.players[index].userID,
                            'Bir k…ôndlini xilas etdin, ancaq yaralandƒ±n v…ô artƒ±q m√ºhafiz…ô√ßi kimi i≈ül…ôy…ô bilm…ôzs…ôn...');
                    }
                }
            });
        }
    });
    //–ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª–∏ –ª–∏ –¥–µ–π—Å—Ç–≤–∏—è –Ω–æ—á—å—é
    if (trigerAction === 0) {
        await dq.updateDataInactivePlay(ChatID); //–Ω–µ –±—ã–ª–æ –¥–µ–π—Å—Ç–≤–∏–π
    } else {
        cloneData.dataGame.inactivePlay = 5;
        //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –µ—Å–ª–∏ –∫–æ–≥–æ-—Ç–æ —É–±–∏–ª–∏
        cloneData.players.forEach((player, i) => {
            if (!player.lifeStatus && data.players[i].lifeStatus) {
                kill += 9;
                if (player.initialRole == '√ñl√ºms√ºz'){
                    if (Math.random() > 0.65){
                        cloneData.players[i].lifeStatus = true;
                        cloneData = updateCounter(cloneData, i, false);
                        kill -= 1;
                        Lucky = false;
                        app.bot.telegram.sendMessage(
                            ChatID,
                            `Bu ax≈üam insanlardan b…ôzil…ôrin…ô qism…ôt oldu...`);
                        app.bot.telegram.sendMessage(
                            player.userID,
                            `Bu gec…ô sizin √º√ß√ºn ≈üanslƒ± v…ô m√∂c√ºz…ôvi ≈ü…ôkild…ô dirildi...`);
                    } else {
                        app.bot.telegram.sendMessage(
                            ChatID,
                            `Bu gec…ô ${player.name} √∂ld√ºr√ºld√º, o ${player.role} idi`);
                    }
                } else {
                    app.bot.telegram.sendMessage(
                        ChatID,
                        `Bu gec…ô ${player.name} √∂ld√ºr√ºld√º, o ${player.role} idi`);
                }
                if (player.initialRole == 'Cin') {
                    cloneData.players.forEach((player, i) => {
                        if (player.lifeStatus && player.role == 'Ruh') {
                            app.bot.telegram.sendMessage(
                                ChatID,
                                'Cin √∂ld√º, Ruh rolunu d…ôyi≈üib Cin oldu!');
                            cloneData.players[i].role = 'Cin';
                        }
                    });
                } else if (player.initialRole == 'Komissar') {
                    cloneData.players.forEach((player, i) => {
                        if (player.lifeStatus && player.role == 'Leytenant') {
                            app.bot.telegram.sendMessage(
                                player.userID,
                                'Komissar √∂ld√º, insanlarƒ±n ba≈ü√ßƒ±sƒ± s…ôns…ôn!');
                            cloneData.players[i].role = 'Komissar';
                        }
                    });
                } else if (player.initialRole == 'Zombi') {
                    cloneData.players.forEach((player, i) => {
                        if (player.lifeStatus && player.role == 'D…ôli') {
                            app.bot.telegram.sendMessage(
                                ChatID,
                                'Zombi √∂ld√º, artƒ±q b√ºt√ºn m…ôsuliyy…ôt s…ônin √ºz…ôrind…ôdir!');
                            cloneData.players[i].role = 'Zombi';
                        }
                    });
                }
            }
        });
        cloneData.dataGame.counterDays += 1;
        await dq.updateDataGame(ChatID, cloneData.dataGame, cloneData.players); //–ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
        if (kill == 0 && !Lucky) {
            app.bot.telegram.sendMessage(
                ChatID,
                'Bu gec…ô he√ßkim √∂lm…ôdi...');
        }
    }
}

//–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–Ω—è
async function ProcessingResultsDay(ChatID) {
    const data = await dq.getDataGame(ChatID); //–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    let maxVoice = 0,
        counter = 0,
        userNumber;
    await deleteMessageAct(data, ChatID); //–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–∏–º–∞–ª
    data.players.forEach((player) => {
        if (player.lifeStatus && player.votesAgainst > maxVoice) {
            maxVoice = player.votesAgainst;
        }
    });
    data.players.forEach((player, i) => {
        if (player.lifeStatus && player.votesAgainst == maxVoice) {
            counter += 1;
            userNumber = i;
        }
        dq.clearVoticeDay(ChatID, player.userID);
    });
    if (counter == 1){
        const message = await app.bot.telegram.sendMessage(
            ChatID,
            `ƒ∞nsanlar <a href="tg://user?id=${data.players[userNumber].userID}">${data.players[userNumber].name} Cin olduƒüunu d√º≈ü√ºn√ºrl…ôr, √∂ld√ºrm…ôk ist…ôyirsiniz?</a>?`,
            {
              parse_mode: 'HTML',
              reply_markup: keyboards.voteYesNoDay(data.players[userNumber].userID, 0, 0)
            }
        );
        await delay(30000);
        await app.bot.telegram.deleteMessage(ChatID, message.message_id);
        //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–≤–µ—à–∞–Ω—å—è –≤ —á–∞—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ –∞–π–¥–∏, –ø–æ—Å–ª–µ —Ç–∞–π–º–µ—Ä–∞ —É–¥–∞–ª–∏–º –µ–≥–æ, –≤ –±–∞–∑—É –∑–∞–Ω–æ—Å–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
        const newData = await dq.getDataPlayers(ChatID);
        if (newData.players[userNumber].votesAgainst > newData.players[userNumber].votesFor) {
            await dq.suspendPlayer(ChatID, newData.players[userNumber].userID); //–í–µ—à–∞–µ–º –∏–≥—Ä–æ–∫–∞
            if (newData.players[userNumber].initialRole == ('Zombi'||'D…ôli')) {
                dq.decrementCounterTriada(ChatID);
            } else if (newData.players[userNumber].initialRole == ('Cin'||'Ruh')) {
                dq.decrementCounterMafia(ChatID);
            } else {
                dq.decrementCounterWorld(ChatID);
            }
            await app.bot.telegram.sendMessage(
                ChatID,
                `S…ôh…ôr g√∂r√º≈ü√ºnd…ô asƒ±ldƒ± - <a href="tg://user?id=${newData.players[userNumber].userID}">`+
                `${newData.players[userNumber].name}</a> - ${newData.players[userNumber].role}`,
                { parse_mode: 'HTML' }
            );
        } else {
            await app.bot.telegram.sendMessage(
                ChatID,
                `ƒ∞nsanlarƒ±n fikirl…ôri f…ôrqli oldu, bu gec…ô he√ß kimi asmadƒ±lar..`
            );
        }
        for (const player of data.players) {
            await dq.clearVoticeDay(ChatID, player.userID);
        }
    } else {
        await app.bot.telegram.sendMessage(
            ChatID,
            `ƒ∞nsanlarƒ±n fikirl…ôri f…ôrqli oldu, bu gec…ô he√ß kimi asmadƒ±lar...`
        );
    }
}


//–û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∂–∏—Ç–µ–ª–µ–π
function updateCounter(data, i, action) {
    if (action) {
        if (data.players[i].initialRole == ('Zombi'||'D…ôli')) {
            data.dataGame.counterPlayers -= 1;
            data.dataGame.counterTriada -= 1;
        } else if (data.players[i].initialRole == ('Cin'||'Ruh')) {
            data.dataGame.counterPlayers -= 1;
            data.dataGame.counterMafia -= 1;
        } else {
            data.dataGame.counterPlayers -= 1;
            data.dataGame.counterWorld -= 1;
        }
    } else {
        if (data.players[i].initialRole == ('Zombi'||'D…ôli')) {
            data.dataGame.counterPlayers += 1;
            data.dataGame.counterTriada += 1;
        } else if (data.players[i].initialRole == ('Cin'||'Ruh')) {
            data.dataGame.counterPlayers += 1;
            data.dataGame.counterMafia += 1;
        } else {
            data.dataGame.counterPlayers += 1;
            data.dataGame.counterWorld += 1;
        }
    }
    return data;
}

//–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–∏—Ñ–∫—É —Å–Ω–∞—á–∞–ª–æ–º –¥–Ω—è
async function sendSunMessage(ChatID, i) {
    await app.bot.telegram.sendAnimation(
        ChatID,
        'https://media.tenor.com/images/286ae769ba034e724ce706d371df374d/tenor.gif',
        {
          parse_mode: 'HTML',
          caption: `üåå<b>C…ôh…ônn…ômd…ô ${i} gec…ô ke√ßirdiniz</b>\nSabahƒ±nƒ±z xeyir...`,
          reply_markup: keyboards.goToBot(process.env.URL_BOT)
        }
    );
}

//–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∂–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –¥–Ω—è
async function sendDayMessageLivePlayers(ChatID, data) {
    let listUsers = '';
    let listRoles = '';
    let caunter = 0;
    let masRole = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    data.players.forEach((player) => {
        if (player.lifeStatus) {
            caunter++;
            listUsers +=`\n${caunter}) <a href="tg://user?id=${player.userID}">${player.name}</a>`;
            switch(player.role) {
                case 'ƒ∞nsan':
                    masRole[0]+=1;
                    break;
                case 'Cin':
                    masRole[1]=1;
                    break;
                case 'Ruh':
                    masRole[2]=1;
                    break;
                case 'H…ôkim':
                    masRole[3]=1;
                    break;
                case 'Komissar':
                    masRole[4]=1;
                    break;
                case 'Leytenant':
                    masRole[5]=1;
                    break;
                case '√ñl√ºms√ºz':
                    masRole[6]=1;
                    break;
                case 'Kamikadze':
                    masRole[7]=1;
                    break;
                case 'M√ºhafiz…ô√ßi':
                    masRole[8]=1;
                    break;
                case 'Manyak':
                    masRole[9]=1;
                    break;
                case 'M…ô≈üuq…ô':
                    masRole[10]=1;
                    break;
                case 'Zombi':
                    masRole[11]=1;
                    break;
                case 'D…ôli':
                    masRole[12]=1;
                    break;
            }
        }
    });
    if (masRole[0]>1) {
        listRoles+=`üë®üèº ƒ∞nsan - ${masRole[0]}, `;
    } else if (masRole[0]==1) {
        listRoles+=`üë®üèº ƒ∞nsan, `;
    }
    if (masRole[1]==1) { listRoles+=`üëπ Cin, `; }
    if (masRole[2]==1) { listRoles+=`üë∫ Ruh, `; }
    if (masRole[3]==1) { listRoles+=`üë®üèº‚Äç‚öïÔ∏è H…ôkim, `; }
    if (masRole[4]==1) { listRoles+=`üïµüèºÔ∏è‚Äç‚ôÇÔ∏è Komissar, `; }
    if (masRole[5]==1) { listRoles+=`üëÆüèª Leytenant, `; }
    if (masRole[6]==1) { listRoles+=`üï∫ √ñl√ºms√ºz, `; }
    if (masRole[7]==1) { listRoles+=`ü§¶üèº‚Äç‚ôÇÔ∏è Kamikadze, `; }
    if (masRole[8]==1) { listRoles+=`‚úä M√ºhafiz…ô√ßi, `; }
    if (masRole[9]==1) { listRoles+=`üî™ Manyak, `; }
    if (masRole[10]==1) { listRoles+=`üíÉüèª M…ô≈üuq…ô, `; }
    if (masRole[11]==1) { listRoles+=`üßü‚Äç‚ôÄ Zombi, `; }
    if (masRole[12]==1) { listRoles+=`üßòüèª D…ôli, `; }
    await app.bot.telegram.sendMessage(
        ChatID,
        `<b>üî•Saƒü qalan oyun√ßular:</b>`+listUsers+`\n\n<b>Onlardan:</b>`+listRoles.slice(0, -2)+
            `\nüë•C…ômi: ${caunter} \n\nƒ∞ndi gec…ônin n…ôtic…ôl…ôrini m√ºzakir…ô etm…ôk vaxtƒ±dƒ±r.....\n45 Saniy…ô sonra s…ôsverm…ô ba≈ülayƒ±r`,
        { parse_mode: 'HTML' }
    );
}

//–ü–∞—É–∑–∞
function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

//–ü—Ä–æ–≤–µ—Ä—è–µ–º –∂–∏–≤ –ª–∏ –∏–≥—Ä–æ–∫ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ä–æ–ª—å—é
function roleLifeCheck(players, role) {
    return players.some((player) => {
        return player.role == role && player.lifeStatus;
    });
}

//–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ —Ç–µ–∫—Å—Ç
function convertTimeToText(time) {
    let text = '';
    const timeGame = Date.now() - time,
          hours = Math.floor(timeGame/(1000*60*60)),
          minutes = Math.floor(timeGame/(1000*60))-hours*60,
          seconds = Math.floor(timeGame/(1000))-minutes*60-hours*60*60;
    if (hours != 0) {
        text+=`${hours} s. `;
    }
    if (minutes != 0) {
        text+=`${minutes} d…ôq. `;
    }
    if (seconds != 0) {
        text+=`${seconds} san. `;
    }
    return text;
}

//–ó–∞–ø—É—Å–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async function registration(ChatID) {
    for (let i = 90; i > 0; i -= 30) {
        await sendMessageRegistration(ChatID, i);
        await delay(30000);
        const data = await dq.getDataDeleteMessageRegistration(ChatID);
        if (data.messageID == 0){
            break;
        }
    }
    await deleteMessageRegistration(ChatID);
}


//–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async function sendMessageRegistration(ChatID, time) {
    if (time != 90) {
      deleteMessageRegistration(ChatID);
    }
    const messageRegistration = await app.bot.telegram.sendMessage(
        ChatID,
        `Oyun ${time} saniy…ôy…ô ba≈ülayacaq! \nOyun√ßularƒ±n siyahƒ±sƒ±:`+ await getLifeUsersText(ChatID),
        {
            parse_mode: 'HTML',
            reply_markup: keyboards.userRegistrationBtn(process.env.URL_BOT, ChatID)
        }
    );
    await dq.getDataSendMessageRegistration(ChatID, messageRegistration.message_id, time);
}


//–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async function deleteMessageRegistration(chatID) {
    const data = await dq.getDataDeleteMessageRegistration(chatID);
    if (data.messageID != 0){
        app.bot.telegram.deleteMessage(chatID, data.messageID);
    }
}


//–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∂–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
async function getLifeUsersText(chatID) {
    let listUsers = '',
        caunter = 0;
    const data = await dq.getDataPlayers(chatID);

    data.players.forEach((player) => {
        if (player.lifeStatus) {
            caunter++;
            listUsers +=`\n${caunter}) <a href="tg://user?id=${player.userID}">${player.name}</a>`;
        }
    });
    return listUsers;
}

//–î–Ω–µ–≤–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
async function lastVote(ChatID, result, userID, userIDAct, messageID, callbackQueryID) {
    const user = await dq.getInfoPlayer(ChatID, userID),
          userAct = await dq.getInfoPlayer(ChatID, userIDAct);

    if (userID != userIDAct) {
        if (user.players[0].lifeStatus &&
            user.players[0].votes &&
            !user.players[0].whetherVoted) {
                if (result) { //–ó–∞
                    await dq.updateCallbackDataVotesAgainstPlayer(ChatID, userIDAct, 1);
                    app.bot.telegram.editMessageReplyMarkup(
                        ChatID,
                        messageID,
                        null,
                        keyboards.voteYesNoDay(
                            userAct.players[0].userID,
                            userAct.players[0].votesAgainst+1, userAct.players[0].votesFor
                        )
                    );
                    app.bot.telegram.answerCbQuery(callbackQueryID, 'Siz s…ôs verdiniz üëç');
                } else { //–ü—Ä–æ—Ç–∏–≤
                    await dq.updateCallbackDataVotesForPlayer(ChatID, userIDAct, 1);
                    app.bot.telegram.editMessageReplyMarkup(
                        ChatID,
                        messageID,
                        null,
                        keyboards.voteYesNoDay(
                            userAct.players[0].userID,
                            userAct.players[0].votesAgainst, userAct.players[0].votesFor+1
                        )
                    );
                    app.bot.telegram.answerCbQuery(callbackQueryID, 'Siz s…ôs verdiniz üëé');
                }
                await dq.updateCallbackDataVotesPlayer(ChatID, userID, true, result);
        } else if (user.players[0].lifeStatus &&
                   user.players[0].votes &&
                   user.players[0].whetherVoted) {
            //–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª
            if (user.players[0].votingResult != result) {
                await dq.updateCallbackDataVotesPlayer(ChatID, userID, true, result);
                if (result) {
                    await dq.updateCallbackDataVotesAgainstPlayer(ChatID, userIDAct, 1);
                    await dq.updateCallbackDataVotesForPlayer(ChatID, userIDAct, -1);
                    app.bot.telegram.editMessageReplyMarkup(
                        ChatID,
                        messageID,
                        null,
                        keyboards.voteYesNoDay(
                            userAct.players[0].userID,
                            userAct.players[0].votesAgainst+1, userAct.players[0].votesFor-1
                        )
                    );
                    app.bot.telegram.answerCbQuery(callbackQueryID, 'S…ôsini d…ôyi≈üdirdin üëç');
                } else {
                    await dq.updateCallbackDataVotesAgainstPlayer(ChatID, userIDAct, -1);
                    await dq.updateCallbackDataVotesForPlayer(ChatID, userIDAct, 1);
                    app.bot.telegram.editMessageReplyMarkup(
                        ChatID,
                        messageID,
                        null,
                        keyboards.voteYesNoDay(
                            userAct.players[0].userID,
                            userAct.players[0].votesAgainst-1, userAct.players[0].votesFor+1
                        )
                    );
                    app.bot.telegram.answerCbQuery(callbackQueryID, 'S…ôsini d…ôyi≈üdirdin üëé');
                }
            }
        } else {
            app.bot.telegram.answerCbQuery(callbackQueryID, 'Siz s…ôs ver…ô bilm…ôzsiniz!');
        }
    } else {
        app.bot.telegram.answerCbQuery(callbackQueryID, 'Siz s…ôs ver…ô bilm…ôzsiniz!');
    }
}


//–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–ª–±–µ–∫–∏
export async function callbackQuery(ctx) {
    if (ctx.callbackQuery.data.slice(0, 3) == 'act') {
      await ctx.deleteMessage();
      const messageData = ctx.callbackQuery.data.split(' ');
      await dq.updateDataCounterActiveRoles(messageData[1], false);
      await dq.updateMessageIDPlayer(messageData[1], 0, ctx.callbackQuery.from.id);
      sendMessageAboutProgressRole(messageData[1], ctx.callbackQuery.from.id, messageData[2]);
      await dq.updateCallbackDataPlayer(messageData[1], messageData[2], ctx.callbackQuery.from.id);
    } else if (ctx.callbackQuery.data.slice(0, 2) == 'vs') {
      await ctx.deleteMessage();
      const messageData = ctx.callbackQuery.data.split(' ');
      await dq.updateMessageIDPlayer(messageData[1], 0, ctx.callbackQuery.from.id);
      sendMessageVoiceUserInChat(messageData[1], ctx.callbackQuery.from.id, messageData[2]);
      await dq.updateCallbackDataVotesAgainstPlayer(messageData[1], messageData[2], 1);
    } else if (ctx.callbackQuery.data.slice(0, 8) == 'copcheck') {
      await ctx.deleteMessage();
      await dq.updateDataCounterActiveRoles(ctx.callbackQuery.data.slice(8), true);
      const dataPlayers = await dq.getDataPlayers(ctx.callbackQuery.data.slice(8));
      const message = await app.bot.telegram.sendMessage(
        ctx.callbackQuery.from.id,
        'Kiml…ôri yoxlayacaƒüƒ±q?',
        {
          reply_markup: keyboards.buttonActionsNight(
            ctx.callbackQuery.data.slice(8),
            dataPlayers.players,
            ctx.callbackQuery.from.id, 1)
        }
      );
      await dq.updateCallbackDataCop(ctx.callbackQuery.data.slice(8), true, ctx.callbackQuery.from.id, message.message_id);
    } else if (ctx.callbackQuery.data.slice(0, 7) == 'copkill') {
      await ctx.deleteMessage();
      await dq.updateDataCounterActiveRoles(ctx.callbackQuery.data.slice(7), true);
      const dataPlayers = await dq.getDataPlayers(ctx.callbackQuery.data.slice(7));
      const message = await app.bot.telegram.sendMessage(
        ctx.callbackQuery.from.id,
        'Kiml…ôri √∂ld√ºr…ôc…ôyik?',
        {
          reply_markup: keyboards.buttonActionsNight(
            ctx.callbackQuery.data.slice(7),
            dataPlayers.players,
            ctx.callbackQuery.from.id, 1)
        }
      );
      await dq.updateCallbackDataCop(ctx.callbackQuery.data.slice(7), false, ctx.callbackQuery.from.id, message.message_id);
    } else if (ctx.callbackQuery.data == 'newgame') {
      await ctx.deleteMessage();
      if (functions.checkBotAdmin(ctx.callbackQuery.message.chat.id)) {
        functions.updateOrAddChatInBD(ctx.callbackQuery.message.chat.id, ctx.callbackQuery.message.chat.title);
        launch(ctx.callbackQuery.message.chat.id);
      }
    } else if (ctx.callbackQuery.data.slice(0, 3) == 'yes') {
      await lastVote(
        ctx.callbackQuery.message.chat.id, //ChatID
        true,                              //–ì–æ–ª–æ—Å –∑–∞
        ctx.callbackQuery.from.id,         //–ê–π–¥–∏ —Ç–æ–≥–æ –∫—Ç–æ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É
        ctx.callbackQuery.data.slice(3),   //–ê–π–¥–∏ —Ç–æ–≥–æ –∫–æ–º—É –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å
        ctx.callbackQuery.message.message_id,//–ê–π–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
        ctx.callbackQuery.id
        );
    } else if (ctx.callbackQuery.data.slice(0, 2) == 'no') {
      await lastVote(
        ctx.callbackQuery.message.chat.id, //ChatID
        false,                              //–ì–æ–ª–æ—Å –∑–∞
        ctx.callbackQuery.from.id,         //–ê–π–¥–∏ —Ç–æ–≥–æ –∫—Ç–æ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É
        ctx.callbackQuery.data.slice(2),   //–ê–π–¥–∏ —Ç–æ–≥–æ –∫–æ–º—É –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å
        ctx.callbackQuery.message.message_id,//–ê–π–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
        ctx.callbackQuery.id
        );
    }
  }

